#
# Vagoth Cluster Controller
#

name = test cluster
description = Vagoth test cluster

# how to manage VM information
[registry]
    factory = vagoth.registry.pickleregistry:PickleRegistry
    filename = /var/lib/vagoth/registry.pickle
#    factory = vagoth.registry.couch_registry:CouchRegistry
#    couch_server = http://couchdb:5984
#    couch_nodes_table = "vagoth/nodes"
#    couch_unique_table = "vagoth/unique"

# The scheduler is called to schedule asynchronous actions.
[scheduler]
    factory = vagoth.scheduler.sync:SyncJobScheduler
    #factory = vagoth.scheduler.threadscheduler:ThreadScheduler

# Called to modify a VM definition before defining it, and after undefining it.
# eg. it might turn "tiny" into a VM with an IP, MAC, and a storage volume.
[provisioner]
    factory = vagoth.provisioner.dummy:DummyProvisioner

# For virtualisation support
[virt]
  # how to choose where to assign/deploy a VM
  [[allocator]]
    factory = vagoth.virt.allocators.dummy:DummyAllocator
    node = nator

  # how to actually deploy the VM
  [[driver]]
    factory = vagoth.virt.drivers.geats:GeatsMcollective

  # called by the default poll action (poll hypervisors for status)
  [[monitor]]
    factory = vagoth.virt.monitor:Monitor
    create_missing = true

# Every node has a type, and this maps the type to a python
# class that will be instantiated.
[node_types]
    # provides an API for a virtual machine
    vm = vagoth.virt.virtualmachine:VirtualMachine
    # provides a minimal API for a hypervisor
    hv = vagoth.virt.hypervisor:Hypervisor

# actions do all the work (usually in a background process) to
# manage the cluster.
[actions]
    vm_start = vagoth.virt.actions:vm_start
    vm_stop = vagoth.virt.actions:vm_stop
    vm_provision = vagoth.virt.actions:vm_provision
    vm_define = vagoth.virt.actions:vm_define
    vm_undefine = vagoth.virt.actions:vm_undefine
    vm_deprovision = vagoth.virt.actions:vm_deprovision
    vm_poll = vagoth.virt.actions:vm_poll
