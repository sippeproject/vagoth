#!/usr/bin/python

from vagoth.manager import get_manager
import argparse
from vagoth.drivers import geats
from pprint import pprint

manager = get_manager()

p_global = argparse.ArgumentParser(add_help=False)
p_global.add_argument("--verbose", action='store_true')
p_global_subs = p_global.add_subparsers(title="subcommands", description="valid subcommands")

# helper function to create a subcommand with argparse
def make_subcommand(command, helptext, function):
    global p_global_subs
    parser = p_global_subs.add_parser(command, help=helptext)
    parser.set_defaults(func=function)
    return parser

def cmd_list(args):
    global manager
    for vm_name in manager.list_vms():
        vm = manager.get_vm(vm_name)
        state, substate = vm.get_state(), "fixme" # vm.get_state()
        description = vm.get_definition().get('description', "")
        node = vm.get_node()
        assignment = node and node.get_name() or "-"
        print("{0}: {1}/{2} ({3}) [hv={4}]".format(vm_name, state, substate, description, assignment))
p_list = make_subcommand("list", "List all VMs", cmd_list)

def cmd_list_nodes(args):
    global manager
    for node_name in manager.list_nodes():
        node = manager.get_node(node_name)
        state = node.get_state()
        description = node.get_definition().get('description', "")
        print("{0}: {1}/{2} ({3})".format(node_name, state, state, description))
p_list_nodes = make_subcommand("list_nodes", "List all Nodes", cmd_list_nodes)

def cmd_start(args):
    global manager
    try:
        vm = manager.get_vm(args.vm_name)
        vm.start()
        print("start: OK ({0})".format(args.vm_name))
    except KeyError as e:
        print(e.message)
p_start = make_subcommand("start", "Start a VM", cmd_start)
p_start.add_argument("vm_name", type=str, help="Name of VM")

def cmd_stop(args):
    global manager
    try:
        vm = manager.get_vm(args.vm_name)
        vm.stop()
        print("stop: OK ({0})".format(args.vm_name))
    except KeyError as e:
        print(e.message)
p_stop = make_subcommand("stop", "Stop a VM", cmd_stop)
p_stop.add_argument("vm_name", type=str, help="Name of VM")

def cmd_poll(args):
    global manager
    monitor = manager.monitor
    monitor.poll_nodes()
p_poll = make_subcommand("poll", "Poll cluster for status", cmd_poll)

if __name__ == '__main__':
    args = p_global.parse_args()
    args.func(args)
